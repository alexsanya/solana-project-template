/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CreateTreeInstructionAccounts = {
  /** The account paying for the storage fees */
  payer?: Signer;
  /** The address of the new account */
  tree: PublicKey | Pda;
  /** The system program */
  systemProgram?: PublicKey | Pda;
  /** Sysvar rent account */
  sysvarRent?: PublicKey | Pda;
};

// Data.
export type CreateTreeInstructionData = {
  discriminator: number;
  maxDepth: number;
};

export type CreateTreeInstructionDataArgs = { maxDepth: number };

export function getCreateTreeInstructionDataSerializer(): Serializer<
  CreateTreeInstructionDataArgs,
  CreateTreeInstructionData
> {
  return mapSerializer<
    CreateTreeInstructionDataArgs,
    any,
    CreateTreeInstructionData
  >(
    struct<CreateTreeInstructionData>(
      [
        ['discriminator', u8()],
        ['maxDepth', u8()],
      ],
      { description: 'CreateTreeInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 })
  ) as Serializer<CreateTreeInstructionDataArgs, CreateTreeInstructionData>;
}

// Args.
export type CreateTreeInstructionArgs = CreateTreeInstructionDataArgs;

// Instruction.
export function createTree(
  context: Pick<Context, 'payer' | 'programs'>,
  input: CreateTreeInstructionAccounts & CreateTreeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'merkleTreeStorage',
    'TREEZwpvqQN6HVAAPjqhJAr8BuoGhXSx34jm9YV5DPB'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    tree: { index: 1, isWritable: true as boolean, value: input.tree ?? null },
    systemProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    sysvarRent: {
      index: 3,
      isWritable: false as boolean,
      value: input.sysvarRent ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateTreeInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.sysvarRent.value) {
    resolvedAccounts.sysvarRent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCreateTreeInstructionDataSerializer().serialize(
    resolvedArgs as CreateTreeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
